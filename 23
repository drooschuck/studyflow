import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { format, startOfWeek, addDays, subWeeks, addWeeks, parseISO } from 'date-fns';
import { 
  ChevronLeft, 
  ChevronRight, 
  TrendingUp, 
  Award,
  Calendar,
  Clock,
  Target,
  BookOpen,
  CheckCircle,
  Star
} from 'lucide-react';
import { useApp } from '../context/AppContext';

export default function Progress() {
  const { state, dispatch } = useApp();
  const [selectedWeek, setSelectedWeek] = useState(new Date());

  const weekStart = startOfWeek(selectedWeek, { weekStartsOn: 1 }); // Start on Monday
  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));

  // Calculate weekly stats
  const weeklyStats = weekDays.map(date => {
    const dateString = format(date, 'yyyy-MM-dd');
    const dayActivities = state.activities.filter(activity => activity.date === dateString);
    const studyActivities = dayActivities.filter(activity => activity.type === 'study');
    const completedStudyActivities = studyActivities.filter(activity => activity.status === 'completed');
    
    const totalStudyTime = completedStudyActivities.reduce((total, activity) => {
      const start = parseISO(`${activity.date}T${activity.startTime}`);
      const end = parseISO(`${activity.date}T${activity.endTime}`);
      return total + (end.getTime() - start.getTime()) / (1000 * 60);
    }, 0);

    const completedTasks = dayActivities.filter(activity => activity.status === 'completed').length;
    const totalTasks = dayActivities.length;

    return {
      date: dateString,
      day: format(date, 'EEE'),
      dayNumber: format(date, 'd'),
      studyTime: totalStudyTime,
      completedTasks,
      totalTasks,
      completionRate: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0
    };
  });

  // Subject-wise study time
  const subjectStats = state.subjects.map(subject => {
    const subjectStudyTime = state.activities
      .filter(activity => 
        activity.type === 'study' && 
        activity.status === 'completed' &&
        activity.studySession?.subject === subject.name
      )
      .reduce((total, activity) => {
        const start = parseISO(`${activity.date}T${activity.startTime}`);
        const end = parseISO(`${activity.date}T${activity.endTime}`);
        return total + (end.getTime() - start.getTime()) / (1000 * 60);
      }, 0);

    return {
      ...subject,
      studyTime: subjectStudyTime
    };
  }).sort((a, b) => b.studyTime - a.studyTime);

  // Weekly totals
  const weeklyTotalStudyTime = weeklyStats.reduce((total, day) => total + day.studyTime, 0);
  const weeklyCompletedTasks = weeklyStats.reduce((total, day) => total + day.completedTasks, 0);
  const weeklyTotalTasks = weeklyStats.reduce((total, day) => total + day.totalTasks, 0);
  const weeklyCompletionRate = weeklyTotalTasks > 0 ? (weeklyCompletedTasks / weeklyTotalTasks) * 100 : 0;

  // Achievements
  const earnedAchievements = state.achievements.filter(achievement => achievement.earned);
  const availableAchievements = state.achievements.filter(achievement => !achievement.earned);

  const handlePreviousWeek = () => {
    setSelectedWeek(subWeeks(selectedWeek, 1));
  };

  const handleNextWeek = () => {
    setSelectedWeek(addWeeks(selectedWeek, 1));
  };

  const getCompletionColor = (rate: number) => {
    if (rate >= 80) return 'bg-green-500';
    if (rate >= 60) return 'bg-yellow-500';
    if (rate >= 40) return 'bg-orange-500';
    return 'bg-red-500';
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Progress Tracking</h1>
          <p className="mt-1 text-sm text-gray-500">
            Monitor your study habits and track your achievements
          </p>
        </div>
      </div>

      {/* Weekly Overview */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-900">Weekly Overview</h2>
            <div className="flex items-center space-x-2">
              <button
                onClick={handlePreviousWeek}
                className="p-2 hover:bg-gray-100 rounded-md transition-colors"
              >
                <ChevronLeft className="h-4 w-4" />
              </button>
              <span className="font-medium text-gray-900 min-w-[200px] text-center">
                {format(weekStart, 'MMM d')} - {format(addDays(weekStart, 6), 'MMM d, yyyy')}
              </span>
              <button
                onClick={handleNextWeek}
                className="p-2 hover:bg-gray-100 rounded-md transition-colors"
              >
                <ChevronRight className="h-4 w-4" />
              </button>
            </div>
          </div>
        </div>

        {/* Weekly Stats Summary */}
        <div className="p-6 border-b border-gray-200">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-lg mx-auto mb-3">
                <Clock className="h-6 w-6 text-blue-600" />
              </div>
              <p className="text-2xl font-bold text-gray-900">
                {Math.round(weeklyTotalStudyTime)}m
              </p>
              <p className="text-sm text-gray-600">Total Study Time</p>
            </div>
            
            <div className="text-center">
              <div className="flex items-center justify-center w-12 h-12 bg-green-100 rounded-lg mx-auto mb-3">
                <CheckCircle className="h-6 w-6 text-green-600" />
              </div>
              <p className="text-2xl font-bold text-gray-900">
                {weeklyCompletedTasks}/{weeklyTotalTasks}
              </p>
              <p className="text-sm text-gray-600">Tasks Completed</p>
            </div>
            
            <div className="text-center">
              <div className="flex items-center justify-center w-12 h-12 bg-purple-100 rounded-lg mx-auto mb-3">
                <Target className="h-6 w-6 text-purple-600" />
              </div>
              <p className="text-2xl font-bold text-gray-900">
                {Math.round(weeklyCompletionRate)}%
              </p>
              <p className="text-sm text-gray-600">Completion Rate</p>
            </div>
          </div>
        </div>

        {/* Daily Progress */}
        <div className="p-6">
          <h3 className="text-md font-medium text-gray-900 mb-4">Daily Progress</h3>
          <div className="grid grid-cols-7 gap-4">
            {weeklyStats.map((day, index) => (
              <motion.div
                key={day.date}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="text-center"
              >
                <div className="text-sm text-gray-600 mb-2">{day.day}</div>
                <div className="text-lg font-semibold text-gray-900 mb-2">{day.dayNumber}</div>
                
                {/* Study Time Bar */}
                <div className="relative h-24 w-8 mx-auto bg-gray-200 rounded-full overflow-hidden">
                  <div
                    className="absolute bottom-0 left-0 right-0 bg-blue-500 transition-all duration-500"
                    style={{ 
                      height: `${Math.min((day.studyTime / Math.max(...weeklyStats.map(d => d.studyTime), 1)) * 100, 100)}%` 
                    }}
                  />
                </div>
                
                <div className="mt-2 text-xs text-gray-600">
                  {Math.round(day.studyTime)}m
                </div>
                
                {/* Completion indicator */}
                <div className="mt-1">
                  <div
                    className={`w-3 h-3 rounded-full mx-auto ${getCompletionColor(day.completionRate)}`}
                    title={`${Math.round(day.completionRate)}% completion rate`}
                  />
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Subject-wise Statistics */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <BookOpen className="h-5 w-5 mr-2" />
              Subject Progress
            </h2>
          </div>
          <div className="p-6">
            {subjectStats.length > 0 ? (
              <div className="space-y-4">
                {subjectStats.map((subject, index) => (
                  <motion.div
                    key={subject.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-center justify-between"
                  >
                    <div className="flex items-center">
                      <div
                        className="w-4 h-4 rounded-full mr-3"
                        style={{ backgroundColor: subject.color }}
                      />
                      <span className="font-medium text-gray-900">{subject.name}</span>
                    </div>
                    <div className="text-right">
                      <div className="font-semibold text-gray-900">
                        {Math.round(subject.studyTime)}m
                      </div>
                      <div className="text-sm text-gray-600">
                        {subject.studyTime > 0 ? `${Math.round((subject.studyTime / weeklyTotalStudyTime) * 100)}%` : '0%'}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <BookOpen className="h-12 w-12 mx-auto mb-3 text-gray-400" />
                <p>No study data available yet</p>
              </div>
            )}
          </div>
        </div>

        {/* Achievements */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <Award className="h-5 w-5 mr-2" />
              Achievements
            </h2>
          </div>
          <div className="p-6">
            {/* Earned Achievements */}
            {earnedAchievements.length > 0 && (
              <div className="mb-6">
                <h3 className="text-md font-medium text-gray-900 mb-3 flex items-center">
                  <Star className="h-4 w-4 mr-1 text-yellow-500" />
                  Earned ({earnedAchievements.length})
                </h3>
                <div className="space-y-3">
                  {earnedAchievements.map((achievement, index) => (
                    <motion.div
                      key={achievement.id}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: index * 0.1 }}
                      className="flex items-center p-3 bg-yellow-50 border border-yellow-200 rounded-lg"
                    >
                      <div className="text-2xl mr-3">{achievement.icon}</div>
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">{achievement.title}</h4>
                        <p className="text-sm text-gray-600">{achievement.description}</p>
                        {achievement.earnedDate && (
                          <p className="text-xs text-gray-500 mt-1">
                            Earned on {format(new Date(achievement.earnedDate), 'MMM d, yyyy')}
                          </p>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {/* Available Achievements */}
            {availableAchievements.length > 0 && (
              <div>
                <h3 className="text-md font-medium text-gray-900 mb-3">
                  Available ({availableAchievements.length})
                </h3>
                <div className="space-y-3">
                  {availableAchievements.map((achievement, index) => (
                    <motion.div
                      key={achievement.id}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: index * 0.1 }}
                      className="flex items-center p-3 bg-gray-50 border border-gray-200 rounded-lg opacity-75"
                    >
                      <div className="text-2xl mr-3 filter grayscale">{achievement.icon}</div>
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">{achievement.title}</h4>
                        <p className="text-sm text-gray-600">{achievement.description}</p>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {state.achievements.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <Award className="h-12 w-12 mx-auto mb-3 text-gray-400" />
                <p>No achievements available</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Study Streak */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <TrendingUp className="h-5 w-5 mr-2" />
          Study Patterns & Insights
        </h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center p-4 bg-blue-50 rounded-lg">
            <div className="text-2xl font-bold text-blue-600 mb-1">
              {Math.round(weeklyTotalStudyTime / 7)}m
            </div>
            <p className="text-sm text-gray-600">Daily Average</p>
          </div>
          
          <div className="text-center p-4 bg-green-50 rounded-lg">
            <div className="text-2xl font-bold text-green-600 mb-1">
              {weeklyStats.filter(day => day.studyTime > 0).length}
            </div>
            <p className="text-sm text-gray-600">Study Days This Week</p>
          </div>
          
          <div className="text-center p-4 bg-purple-50 rounded-lg">
            <div className="text-2xl font-bold text-purple-600 mb-1">
              {Math.max(...weeklyStats.map(day => day.studyTime))}m
            </div>
            <p className="text-sm text-gray-600">Longest Study Day</p>
          </div>
        </div>
      </div>
    </div>
  );
}
