import React, { createContext, useContext, useReducer, ReactNode } from 'react';
import { format, addDays, startOfWeek } from 'date-fns';
import { StudySession, Activity, RoutineTemplate, DailyGoal, Subject, Achievement } from '../types';

interface AppState {
  studySessions: StudySession[];
  activities: Activity[];
  routineTemplates: RoutineTemplate[];
  dailyGoals: DailyGoal[];
  subjects: Subject[];
  achievements: Achievement[];
  selectedDate: string;
}

type AppAction =
  | { type: 'ADD_STUDY_SESSION'; payload: StudySession }
  | { type: 'UPDATE_STUDY_SESSION'; payload: StudySession }
  | { type: 'DELETE_STUDY_SESSION'; payload: string }
  | { type: 'ADD_ACTIVITY'; payload: Activity }
  | { type: 'UPDATE_ACTIVITY'; payload: Activity }
  | { type: 'DELETE_ACTIVITY'; payload: string }
  | { type: 'ADD_ROUTINE_TEMPLATE'; payload: RoutineTemplate }
  | { type: 'UPDATE_ROUTINE_TEMPLATE'; payload: RoutineTemplate }
  | { type: 'DELETE_ROUTINE_TEMPLATE'; payload: string }
  | { type: 'APPLY_TEMPLATE'; payload: { templateId: string; date: string } }
  | { type: 'SET_SELECTED_DATE'; payload: string }
  | { type: 'UPDATE_DAILY_GOAL'; payload: DailyGoal }
  | { type: 'COMPLETE_ACTIVITY'; payload: string }
  | { type: 'EARN_ACHIEVEMENT'; payload: string };

const initialState: AppState = {
  studySessions: [],
  activities: [],
  routineTemplates: [
    {
      id: '1',
      name: 'Standard Weekday',
      description: 'Typical school day routine with study blocks',
      isDefault: true,
      activities: [
        {
          title: 'Morning Preparation',
          type: 'personal',
          startTime: '07:00',
          endTime: '08:00',
          status: 'scheduled',
          color: '#10B981'
        },
        {
          title: 'School Hours',
          type: 'school',
          startTime: '08:00',
          endTime: '15:00',
          status: 'scheduled',
          color: '#6366F1'
        },
        {
          title: 'Lunch Break',
          type: 'meal',
          startTime: '12:00',
          endTime: '13:00',
          status: 'scheduled',
          color: '#F59E0B'
        },
        {
          title: 'Study Session 1',
          type: 'study',
          startTime: '16:00',
          endTime: '17:30',
          status: 'scheduled',
          color: '#EF4444'
        },
        {
          title: 'Break',
          type: 'break',
          startTime: '17:30',
          endTime: '18:00',
          status: 'scheduled',
          color: '#8B5CF6'
        },
        {
          title: 'Study Session 2',
          type: 'study',
          startTime: '18:00',
          endTime: '19:30',
          status: 'scheduled',
          color: '#EF4444'
        },
        {
          title: 'Dinner',
          type: 'meal',
          startTime: '19:30',
          endTime: '20:30',
          status: 'scheduled',
          color: '#F59E0B'
        },
        {
          title: 'Review & Preparation',
          type: 'study',
          startTime: '21:00',
          endTime: '22:00',
          status: 'scheduled',
          color: '#EF4444'
        }
      ]
    },
    {
      id: '2',
      name: 'Weekend Schedule',
      description: 'Relaxed weekend routine with flexible study time',
      isDefault: true,
      activities: [
        {
          title: 'Sleep In',
          type: 'sleep',
          startTime: '08:00',
          endTime: '09:00',
          status: 'scheduled',
          color: '#6B7280'
        },
        {
          title: 'Breakfast & Personal Time',
          type: 'personal',
          startTime: '09:00',
          endTime: '10:30',
          status: 'scheduled',
          color: '#10B981'
        },
        {
          title: 'Study Block 1',
          type: 'study',
          startTime: '10:30',
          endTime: '12:00',
          status: 'scheduled',
          color: '#EF4444'
        },
        {
          title: 'Lunch',
          type: 'meal',
          startTime: '12:00',
          endTime: '13:00',
          status: 'scheduled',
          color: '#F59E0B'
        },
        {
          title: 'Free Time',
          type: 'personal',
          startTime: '13:00',
          endTime: '15:00',
          status: 'scheduled',
          color: '#10B981'
        },
        {
          title: 'Study Block 2',
          type: 'study',
          startTime: '15:00',
          endTime: '16:30',
          status: 'scheduled',
          color: '#EF4444'
        },
        {
          title: 'Evening Activities',
          type: 'personal',
          startTime: '16:30',
          endTime: '19:00',
          status: 'scheduled',
          color: '#10B981'
        }
      ]
    }
  ],
  dailyGoals: [],
  subjects: [
    { id: '1', name: 'Mathematics', color: '#EF4444', totalStudyTime: 0 },
    { id: '2', name: 'Physics', color: '#3B82F6', totalStudyTime: 0 },
    { id: '3', name: 'Chemistry', color: '#10B981', totalStudyTime: 0 },
    { id: '4', name: 'Biology', color: '#F59E0B', totalStudyTime: 0 },
    { id: '5', name: 'English', color: '#8B5CF6', totalStudyTime: 0 },
    { id: '6', name: 'History', color: '#EC4899', totalStudyTime: 0 },
  ],
  achievements: [
    {
      id: '1',
      title: 'Early Bird',
      description: 'Complete a study session before 9 AM',
      icon: '🌅',
      earned: false
    },
    {
      id: '2',
      title: 'Consistent Learner',
      description: 'Study for 7 consecutive days',
      icon: '🔥',
      earned: false
    },
    {
      id: '3',
      title: 'Goal Crusher',
      description: 'Meet your daily study goal for 5 days',
      icon: '🎯',
      earned: false
    },
    {
      id: '4',
      title: 'Marathon Studier',
      description: 'Study for 4+ hours in a single day',
      icon: '🏃‍♀️',
      earned: false
    }
  ],
  selectedDate: format(new Date(), 'yyyy-MM-dd')
};

function appReducer(state: AppState, action: AppAction): AppState {
  switch (action.type) {
    case 'ADD_STUDY_SESSION':
      return {
        ...state,
        studySessions: [...state.studySessions, action.payload]
      };
    
    case 'UPDATE_STUDY_SESSION':
      return {
        ...state,
        studySessions: state.studySessions.map(session =>
          session.id === action.payload.id ? action.payload : session
        )
      };
    
    case 'DELETE_STUDY_SESSION':
      return {
        ...state,
        studySessions: state.studySessions.filter(session => session.id !== action.payload)
      };
    
    case 'ADD_ACTIVITY':
      return {
        ...state,
        activities: [...state.activities, action.payload]
      };
    
    case 'UPDATE_ACTIVITY':
      return {
        ...state,
        activities: state.activities.map(activity =>
          activity.id === action.payload.id ? action.payload : activity
        )
      };
    
    case 'DELETE_ACTIVITY':
      return {
        ...state,
        activities: state.activities.filter(activity => activity.id !== action.payload)
      };
    
    case 'ADD_ROUTINE_TEMPLATE':
      return {
        ...state,
        routineTemplates: [...state.routineTemplates, action.payload]
      };
    
    case 'UPDATE_ROUTINE_TEMPLATE':
      return {
        ...state,
        routineTemplates: state.routineTemplates.map(template =>
          template.id === action.payload.id ? action.payload : template
        )
      };
    
    case 'DELETE_ROUTINE_TEMPLATE':
      return {
        ...state,
        routineTemplates: state.routineTemplates.filter(template => template.id !== action.payload)
      };
    
    case 'APPLY_TEMPLATE':
      const template = state.routineTemplates.find(t => t.id === action.payload.templateId);
      if (!template) return state;
      
      const newActivities = template.activities.map(activity => ({
        ...activity,
        id: `${Date.now()}-${Math.random()}`,
        date: action.payload.date
      }));
      
      return {
        ...state,
        activities: [
          ...state.activities.filter(a => a.date !== action.payload.date),
          ...newActivities
        ]
      };
    
    case 'SET_SELECTED_DATE':
      return {
        ...state,
        selectedDate: action.payload
      };
    
    case 'UPDATE_DAILY_GOAL':
      return {
        ...state,
        dailyGoals: [
          ...state.dailyGoals.filter(goal => goal.date !== action.payload.date),
          action.payload
        ]
      };
    
    case 'COMPLETE_ACTIVITY':
      return {
        ...state,
        activities: state.activities.map(activity =>
          activity.id === action.payload 
            ? { ...activity, status: 'completed' }
            : activity
        )
      };
    
    case 'EARN_ACHIEVEMENT':
      return {
        ...state,
        achievements: state.achievements.map(achievement =>
          achievement.id === action.payload
            ? { ...achievement, earned: true, earnedDate: format(new Date(), 'yyyy-MM-dd') }
            : achievement
        )
      };
    
    default:
      return state;
  }
}

const AppContext = createContext<{
  state: AppState;
  dispatch: React.Dispatch<AppAction>;
} | null>(null);

export function AppProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(appReducer, initialState);

  return (
    <AppContext.Provider value={{ state, dispatch }}>
      {children}
    </AppContext.Provider>
  );
}

export function useApp() {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
}
