import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Plus, 
  LayoutTemplate as TemplateIcon, 
  Copy,
  Edit2,
  Trash2,
  Clock,
  Calendar,
  CheckCircle
} from 'lucide-react';
import { useApp } from '../context/AppContext';
import { RoutineTemplate, Activity } from '../types';

const activityTypeColors = {
  study: '#EF4444',
  break: '#8B5CF6',
  school: '#3B82F6',
  meal: '#F59E0B',
  personal: '#10B981',
  sleep: '#6B7280'
};

export default function Templates() {
  const { state, dispatch } = useApp();
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<RoutineTemplate | null>(null);
  const [selectedDate, setSelectedDate] = useState('');
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    activities: [] as Omit<Activity, 'id' | 'date'>[]
  });

  const handleCreateTemplate = () => {
    setFormData({
      name: '',
      description: '',
      activities: []
    });
    setEditingTemplate(null);
    setShowCreateForm(true);
  };

  const handleEditTemplate = (template: RoutineTemplate) => {
    setFormData({
      name: template.name,
      description: template.description,
      activities: template.activities
    });
    setEditingTemplate(template);
    setShowCreateForm(true);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const templateData: RoutineTemplate = {
      id: editingTemplate?.id || `${Date.now()}-${Math.random()}`,
      name: formData.name,
      description: formData.description,
      activities: formData.activities,
      isDefault: false
    };

    if (editingTemplate) {
      dispatch({ type: 'UPDATE_ROUTINE_TEMPLATE', payload: templateData });
    } else {
      dispatch({ type: 'ADD_ROUTINE_TEMPLATE', payload: templateData });
    }

    setShowCreateForm(false);
    setEditingTemplate(null);
    setFormData({
      name: '',
      description: '',
      activities: []
    });
  };

  const handleDeleteTemplate = (templateId: string) => {
    dispatch({ type: 'DELETE_ROUTINE_TEMPLATE', payload: templateId });
  };

  const handleApplyTemplate = (templateId: string) => {
    if (!selectedDate) {
      alert('Please select a date to apply the template');
      return;
    }
    
    dispatch({ 
      type: 'APPLY_TEMPLATE', 
      payload: { templateId, date: selectedDate } 
    });
    
    setSelectedDate('');
    alert('Template applied successfully!');
  };

  const addActivity = () => {
    setFormData({
      ...formData,
      activities: [
        ...formData.activities,
        {
          title: '',
          type: 'study',
          startTime: '09:00',
          endTime: '10:00',
          status: 'scheduled',
          color: activityTypeColors.study
        }
      ]
    });
  };

  const updateActivity = (index: number, updates: Partial<Omit<Activity, 'id' | 'date'>>) => {
    const newActivities = [...formData.activities];
    newActivities[index] = { 
      ...newActivities[index], 
      ...updates,
      color: updates.type ? activityTypeColors[updates.type] : newActivities[index].color
    };
    setFormData({
      ...formData,
      activities: newActivities
    });
  };

  const removeActivity = (index: number) => {
    setFormData({
      ...formData,
      activities: formData.activities.filter((_, i) => i !== index)
    });
  };

  const duplicateTemplate = (template: RoutineTemplate) => {
    const newTemplate: RoutineTemplate = {
      ...template,
      id: `${Date.now()}-${Math.random()}`,
      name: `${template.name} (Copy)`,
      isDefault: false
    };
    
    dispatch({ type: 'ADD_ROUTINE_TEMPLATE', payload: newTemplate });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Routine Templates</h1>
          <p className="mt-1 text-sm text-gray-500">
            Create and manage daily routine templates to quickly organize your schedule
          </p>
        </div>
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleCreateTemplate}
          className="mt-4 sm:mt-0 inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Template
        </motion.button>
      </div>

      {/* Apply Template Section */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Apply Template to Date</h2>
        <div className="flex items-center space-x-4">
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Select Date
            </label>
            <input
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="flex-shrink-0 pt-6">
            <button
              onClick={() => {
                if (selectedDate && state.routineTemplates.length > 0) {
                  handleApplyTemplate(state.routineTemplates[0].id);
                }
              }}
              disabled={!selectedDate}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              Apply Selected Template
            </button>
          </div>
        </div>
      </div>

      {/* Create/Edit Template Form */}
      <AnimatePresence>
        {showCreateForm && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white rounded-lg shadow-lg p-6"
          >
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              {editingTemplate ? 'Edit Template' : 'Create New Template'}
            </h2>
            
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Template Name
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="e.g., Productive Weekday"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <input
                    type="text"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Brief description of this routine"
                    required
                  />
                </div>
              </div>

              {/* Activities */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-gray-900">Activities</h3>
                  <button
                    type="button"
                    onClick={addActivity}
                    className="inline-flex items-center px-3 py-1 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors"
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    Add Activity
                  </button>
                </div>

                <div className="space-y-4">
                  {formData.activities.map((activity, index) => (
                    <div key={index} className="p-4 border border-gray-200 rounded-lg">
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="md:col-span-2">
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Activity Title
                          </label>
                          <input
                            type="text"
                            value={activity.title}
                            onChange={(e) => updateActivity(index, { title: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Activity name"
                            required
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Type
                          </label>
                          <select
                            value={activity.type}
                            onChange={(e) => updateActivity(index, { type: e.target.value as Activity['type'] })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="study">Study</option>
                            <option value="break">Break</option>
                            <option value="school">School</option>
                            <option value="meal">Meal</option>
                            <option value="personal">Personal</option>
                            <option value="sleep">Sleep</option>
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Start Time
                          </label>
                          <input
                            type="time"
                            value={activity.startTime}
                            onChange={(e) => updateActivity(index, { startTime: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            required
                          />
                        </div>

                        <div className="flex items-end space-x-2">
                          <div className="flex-1">
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                              End Time
                            </label>
                            <input
                              type="time"
                              value={activity.endTime}
                              onChange={(e) => updateActivity(index, { endTime: e.target.value })}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              required
                            />
                          </div>
                          <button
                            type="button"
                            onClick={() => removeActivity(index)}
                            className="p-2 text-red-600 hover:bg-red-50 rounded-md"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {formData.activities.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <TemplateIcon className="h-12 w-12 mx-auto mb-3 text-gray-400" />
                    <p>No activities added yet. Click "Add Activity" to start building your template.</p>
                  </div>
                )}
              </div>

              <div className="flex justify-end space-x-3 pt-4 border-t">
                <button
                  type="button"
                  onClick={() => {
                    setShowCreateForm(false);
                    setEditingTemplate(null);
                  }}
                  className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  {editingTemplate ? 'Update Template' : 'Create Template'}
                </button>
              </div>
            </form>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Templates Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {state.routineTemplates.map((template) => (
          <motion.div
            key={template.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-lg shadow hover:shadow-md transition-shadow"
          >
            <div className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">
                    {template.name}
                  </h3>
                  <p className="text-sm text-gray-600">{template.description}</p>
                  {template.isDefault && (
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mt-2">
                      Default Template
                    </span>
                  )}
                </div>
                
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => duplicateTemplate(template)}
                    className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
                    title="Duplicate template"
                  >
                    <Copy className="h-4 w-4" />
                  </button>
                  {!template.isDefault && (
                    <>
                      <button
                        onClick={() => handleEditTemplate(template)}
                        className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
                      >
                        <Edit2 className="h-4 w-4" />
                      </button>
                      <button
                        onClick={() => handleDeleteTemplate(template.id)}
                        className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-md transition-colors"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </>
                  )}
                </div>
              </div>

              {/* Activities Preview */}
              <div className="space-y-2 mb-4">
                <h4 className="text-sm font-medium text-gray-700 flex items-center">
                  <Clock className="h-4 w-4 mr-1" />
                  Activities ({template.activities.length})
                </h4>
                <div className="max-h-40 overflow-y-auto space-y-1">
                  {template.activities
                    .sort((a, b) => a.startTime.localeCompare(b.startTime))
                    .map((activity, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-2 bg-gray-50 rounded text-sm"
                    >
                      <div className="flex items-center">
                        <div
                          className="w-3 h-3 rounded-full mr-2"
                          style={{ backgroundColor: activity.color }}
                        />
                        <span className="font-medium text-gray-900">{activity.title}</span>
                      </div>
                      <span className="text-gray-600">
                        {activity.startTime} - {activity.endTime}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Apply Button */}
              <button
                onClick={() => {
                  if (selectedDate) {
                    handleApplyTemplate(template.id);
                  } else {
                    const today = new Date().toISOString().split('T')[0];
                    setSelectedDate(today);
                    dispatch({ 
                      type: 'APPLY_TEMPLATE', 
                      payload: { templateId: template.id, date: today } 
                    });
                    alert('Template applied to today!');
                  }
                }}
                className="w-full flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <CheckCircle className="h-4 w-4 mr-2" />
                Apply Template
              </button>
            </div>
          </motion.div>
        ))}
      </div>

      {state.routineTemplates.length === 0 && (
        <div className="text-center py-12">
          <TemplateIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No templates created yet</h3>
          <p className="text-gray-600 mb-4">
            Create your first routine template to quickly organize your daily schedule.
          </p>
          <button
            onClick={handleCreateTemplate}
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="h-4 w-4 mr-2" />
            Create Your First Template
          </button>
        </div>
      )}
    </div>
  );
}
